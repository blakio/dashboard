input createCurrentjobsInput {
  data: CurrentjobsInput
}

type createCurrentjobsPayload {
  currentjob: Currentjobs
}

input createEmployeeInput {
  data: EmployeeInput
}

type createEmployeePayload {
  employee: Employee
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""current jobs"""
type Currentjobs {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  jobnumber: Int
  budget: String
}

type CurrentjobsAggregator {
  count: Int
  totalCount: Int
  sum: CurrentjobsAggregatorSum
  avg: CurrentjobsAggregatorAvg
  min: CurrentjobsAggregatorMin
  max: CurrentjobsAggregatorMax
}

type CurrentjobsAggregatorAvg {
  jobnumber: Float
}

type CurrentjobsAggregatorMax {
  jobnumber: Float
}

type CurrentjobsAggregatorMin {
  jobnumber: Float
}

type CurrentjobsAggregatorSum {
  jobnumber: Float
}

type CurrentjobsConnection {
  values: [Currentjobs]
  groupBy: CurrentjobsGroupBy
  aggregate: CurrentjobsAggregator
}

type CurrentjobsConnection_id {
  key: ID
  connection: CurrentjobsConnection
}

type CurrentjobsConnectionBudget {
  key: String
  connection: CurrentjobsConnection
}

type CurrentjobsConnectionCreatedAt {
  key: DateTime
  connection: CurrentjobsConnection
}

type CurrentjobsConnectionId {
  key: ID
  connection: CurrentjobsConnection
}

type CurrentjobsConnectionJobnumber {
  key: Int
  connection: CurrentjobsConnection
}

type CurrentjobsConnectionUpdatedAt {
  key: DateTime
  connection: CurrentjobsConnection
}

type CurrentjobsGroupBy {
  _id: [CurrentjobsConnection_id]
  id: [CurrentjobsConnectionId]
  createdAt: [CurrentjobsConnectionCreatedAt]
  updatedAt: [CurrentjobsConnectionUpdatedAt]
  jobnumber: [CurrentjobsConnectionJobnumber]
  budget: [CurrentjobsConnectionBudget]
}

input CurrentjobsInput {
  jobnumber: Int
  budget: String
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteCurrentjobsInput {
  where: InputID
}

type deleteCurrentjobsPayload {
  currentjob: Currentjobs
}

input deleteEmployeeInput {
  where: InputID
}

type deleteEmployeePayload {
  employee: Employee
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editCurrentjobsInput {
  jobnumber: Int
  budget: String
}

input editEmployeeInput {
  name: String
  employee_id: Int
  clock_in_time: DateTime
  clock_out_time: DateTime
  lunch_start_time: DateTime
  lunch_end_time: DateTime
  is_clocked_in: Boolean
  is_taking_lunch: Boolean
  job_type: JSON
  total_hrs: Int
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

"""Employee model """
type Employee {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  employee_id: Int
  clock_in_time: DateTime
  clock_out_time: DateTime
  lunch_start_time: DateTime
  lunch_end_time: DateTime
  is_clocked_in: Boolean
  is_taking_lunch: Boolean
  job_type: JSON
  total_hrs: Int
}

type EmployeeAggregator {
  count: Int
  totalCount: Int
  sum: EmployeeAggregatorSum
  avg: EmployeeAggregatorAvg
  min: EmployeeAggregatorMin
  max: EmployeeAggregatorMax
}

type EmployeeAggregatorAvg {
  employee_id: Float
  total_hrs: Float
}

type EmployeeAggregatorMax {
  employee_id: Float
  total_hrs: Float
}

type EmployeeAggregatorMin {
  employee_id: Float
  total_hrs: Float
}

type EmployeeAggregatorSum {
  employee_id: Float
  total_hrs: Float
}

type EmployeeConnection {
  values: [Employee]
  groupBy: EmployeeGroupBy
  aggregate: EmployeeAggregator
}

type EmployeeConnection_id {
  key: ID
  connection: EmployeeConnection
}

type EmployeeConnectionClock_in_time {
  key: DateTime
  connection: EmployeeConnection
}

type EmployeeConnectionClock_out_time {
  key: DateTime
  connection: EmployeeConnection
}

type EmployeeConnectionCreatedAt {
  key: DateTime
  connection: EmployeeConnection
}

type EmployeeConnectionEmployee_id {
  key: Int
  connection: EmployeeConnection
}

type EmployeeConnectionId {
  key: ID
  connection: EmployeeConnection
}

type EmployeeConnectionIs_clocked_in {
  key: Boolean
  connection: EmployeeConnection
}

type EmployeeConnectionIs_taking_lunch {
  key: Boolean
  connection: EmployeeConnection
}

type EmployeeConnectionJob_type {
  key: JSON
  connection: EmployeeConnection
}

type EmployeeConnectionLunch_end_time {
  key: DateTime
  connection: EmployeeConnection
}

type EmployeeConnectionLunch_start_time {
  key: DateTime
  connection: EmployeeConnection
}

type EmployeeConnectionName {
  key: String
  connection: EmployeeConnection
}

type EmployeeConnectionTotal_hrs {
  key: Int
  connection: EmployeeConnection
}

type EmployeeConnectionUpdatedAt {
  key: DateTime
  connection: EmployeeConnection
}

type EmployeeGroupBy {
  _id: [EmployeeConnection_id]
  id: [EmployeeConnectionId]
  createdAt: [EmployeeConnectionCreatedAt]
  updatedAt: [EmployeeConnectionUpdatedAt]
  name: [EmployeeConnectionName]
  employee_id: [EmployeeConnectionEmployee_id]
  clock_in_time: [EmployeeConnectionClock_in_time]
  clock_out_time: [EmployeeConnectionClock_out_time]
  lunch_start_time: [EmployeeConnectionLunch_start_time]
  lunch_end_time: [EmployeeConnectionLunch_end_time]
  is_clocked_in: [EmployeeConnectionIs_clocked_in]
  is_taking_lunch: [EmployeeConnectionIs_taking_lunch]
  job_type: [EmployeeConnectionJob_type]
  total_hrs: [EmployeeConnectionTotal_hrs]
}

input EmployeeInput {
  name: String
  employee_id: Int
  clock_in_time: DateTime
  clock_out_time: DateTime
  lunch_start_time: DateTime
  lunch_end_time: DateTime
  is_clocked_in: Boolean
  is_taking_lunch: Boolean
  job_type: JSON
  total_hrs: Int
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Currentjobs | createCurrentjobsPayload | updateCurrentjobsPayload | deleteCurrentjobsPayload | CurrentjobsConnection | CurrentjobsAggregator | CurrentjobsAggregatorSum | CurrentjobsAggregatorAvg | CurrentjobsAggregatorMin | CurrentjobsAggregatorMax | CurrentjobsGroupBy | CurrentjobsConnection_id | CurrentjobsConnectionId | CurrentjobsConnectionCreatedAt | CurrentjobsConnectionUpdatedAt | CurrentjobsConnectionJobnumber | CurrentjobsConnectionBudget | Employee | createEmployeePayload | updateEmployeePayload | deleteEmployeePayload | EmployeeConnection | EmployeeAggregator | EmployeeAggregatorSum | EmployeeAggregatorAvg | EmployeeAggregatorMin | EmployeeAggregatorMax | EmployeeGroupBy | EmployeeConnection_id | EmployeeConnectionId | EmployeeConnectionCreatedAt | EmployeeConnectionUpdatedAt | EmployeeConnectionName | EmployeeConnectionEmployee_id | EmployeeConnectionClock_in_time | EmployeeConnectionClock_out_time | EmployeeConnectionLunch_start_time | EmployeeConnectionLunch_end_time | EmployeeConnectionIs_clocked_in | EmployeeConnectionIs_taking_lunch | EmployeeConnectionJob_type | EmployeeConnectionTotal_hrs | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionId | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createCurrentjobs(input: createCurrentjobsInput): createCurrentjobsPayload
  updateCurrentjobs(input: updateCurrentjobsInput): updateCurrentjobsPayload
  deleteCurrentjobs(input: deleteCurrentjobsInput): deleteCurrentjobsPayload
  createEmployee(input: createEmployeeInput): createEmployeePayload
  updateEmployee(input: updateEmployeeInput): updateEmployeePayload
  deleteEmployee(input: deleteEmployeeInput): deleteEmployeePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Query {
  currentjob(id: ID!): Currentjobs
  currentjobs(sort: String, limit: Int, start: Int, where: JSON): [Currentjobs]
  currentjobsConnection(sort: String, limit: Int, start: Int, where: JSON): CurrentjobsConnection
  employee(id: ID!): Employee
  employees(sort: String, limit: Int, start: Int, where: JSON): [Employee]
  employeesConnection(sort: String, limit: Int, start: Int, where: JSON): EmployeeConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateCurrentjobsInput {
  where: InputID
  data: editCurrentjobsInput
}

type updateCurrentjobsPayload {
  currentjob: Currentjobs
}

input updateEmployeeInput {
  where: InputID
  data: editEmployeeInput
}

type updateEmployeePayload {
  employee: Employee
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  id: [UploadFileConnectionId]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  id: [UsersPermissionsUserConnectionId]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
